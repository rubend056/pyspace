import pygame
import os
import math

from common import *
from pygame.locals import RLEACCEL, QUIT, K_r, K_SPACE, K_UP, K_LEFT, K_RIGHT

class GameObject(pygame.sprite.DirtySprite):
    """
    A basic class for a gameobject
    """
    def __init__(self):
        self.original = self.image
        self.original_flame, self.flame_rect = load_image('lander_flame.jpg', -1)
        
		self.mass = 10
        self.orientation = 0.0                      # 
        self.rect.topleft = ((SCREEN_WIDTH / 2), 20) # The starting point.
        self.engine_power = 2   # The power of the engine.
        self.velocity = V(0.0,0.0) # Starting velocity. 
        self.landed = False        # Have we landed yet?
        self.intact = True         # Is the ship still shipshape?
        self.fuel = 100            # Units of fuel
        self.boosting = 0          # Are we in "boost" mode? (show the flame graphic)
        return super(pygame.sprite.DirtySprite, self).__init__()
        
    def pos(self):
        return self.rect.top, self.rect.left

class Lander(pygame.sprite.DirtySprite):
    """
    Our intrepid lunar lander!
    """
    def __init__(self):
        self.image, self.rect = load_image('lander.jpg', -1)
        
        self.original = self.image
        self.original_flame, self.flame_rect = load_image('lander_flame.jpg', -1)
        
        self.mass = 10
        self.orientation = 0.0                       # 
        self.rect.topleft = ((SCREEN_WIDTH / 2), 20) # The starting point.
        self.engine_power = 2   # The power of the engine.
        self.velocity = V(0.0,0.0) # Starting velocity. 
        self.landed = False        # Have we landed yet?
        self.intact = True         # Is the ship still shipshape?
        self.fuel = 100            # Units of fuel
        self.boosting = 0          # Are we in "boost" mode? (show the flame graphic)
        return super(pygame.sprite.DirtySprite, self).__init__()

    def update_image(self):
        """
        Update our image based on orientation and engine state of the craft.
        """
        img = self.original_flame if self.boosting else self.original
        center = self.rect.center
        self.image = pygame.transform.rotate(img, -1 * self.orientation)
        self.rect = self.image.get_rect(center=center)

    def rotate(self, angle):
        """
        Rotate the craft.
        """
        self.orientation += angle

    def boost(self):
        """
        Provide a boost to our craft's velocity in whatever orientation we're currently facing. 
        """
        if not self.fuel: return
        self.velocity += V(magnitude=self.engine_power, angle=self.orientation)
        self.fuel -= 1
        if self.landed:
            self.landed = False
            np = self.rect.move(0, -5)
            self.rect = np
        self.boosting = 3
    
    def physics_update(self):
        if not self.landed:
            self.velocity += V(magnitude=.5, angle=180)

    def ok_to_land(self):
        return (self.orientation < 10 or self.orientation > 350) and self.velocity.magnitude < 5

    def check_landed(self, surface):
        if self.landed: return
        if hasattr(surface, "radius"):
            collision = pygame.sprite.collide_circle(self, surface)
        else:
            collision = pygame.sprite.collide_rect(self, surface)
        if collision:
            self.landed = True
            if self.ok_to_land() and surface.landing_ok:
                self.intact = True
            else:
                # Hard landing, kaboom!
                self.intact = False
            self.velocity = V(0.0,0.0)                       # In any case, we stop moving.

    def update(self):
        self.physics_update()   # Iterate physics
        if self.boosting:
            self.boosting -= 1  # Tick over engine time
        self.update_image()
        np = self.rect.move(self.velocity.x, -1 * self.velocity.y)
        self.rect = np
        self.dirty = True
            
    def explode(self, screen):
        for i in range(random.randint(20,40)):
            pygame.draw.line(screen, 
                             (random.randint(190, 255), 
                              random.randint(0,100), 
                              random.randint(0,100)), 
                             self.rect.center, 
                             (random.randint(0, SCREEN_WIDTH), 
                              random.randint(0, SCREEN_HEIGHT)), 
                             random.randint(1,3))

    def stats(self):
        return "Position: [%.2d,%.2d] Velocity: %.2f m/s at %.3d degrees Orientation: %.3d degrees  Fuel: %d Status: [%s]" % (self.rect.top, self.rect.left, self.velocity.magnitude, self.velocity.angle, self.orientation, self.fuel, ("Crashed" if not self.intact else ("Landed" if self.landed else ("OK to Land" if self.ok_to_land() else "Not OK"))))

